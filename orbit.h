//=============================================================================
//
// 軌跡クラス(orbit.h)
// Author : 唐﨑結斗
// 概要 : 軌跡生成を行う
//
//=============================================================================
#ifndef _ORBIT_H_		// このマクロ定義がされてなかったら
#define _ORBIT_H_		// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "mesh.h"
#include "texture.h"

//=============================================================================
// 軌跡クラス
// Author : 唐﨑結斗
// 概要 : 軌跡生成を行うクラス
//=============================================================================
class COrbit : public CMesh3D
{
public:
	//--------------------------------------------------------------------
	// αブレンド計算方法の種別
	// Author : 唐﨑結斗
	// 概要 : αブレンド計算方法の種別分けを行う
	//--------------------------------------------------------------------
	enum BLEND_MODE
	{
		MODE_NORMAL = 0,		// 通常
		MODE_ADD,				// 加算合成
		MODE_SUB,				// 減算合成
		MAX_MODE,				// 計算方法の最大数
	};

	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static COrbit *Create(void);				// 軌跡の生成

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	COrbit();
	~COrbit();

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init() override;						// 初期化
	void Uninit() override;							// 終了
	void Update() override;							// 更新
	void Draw() override;							// 描画
	void SetVtx() override;							// 頂点座標などの設定
	void SetTex() override;							// テクスチャ座標の設定

	// セッター
	void SetMtxParent(D3DXMATRIX *pMtx) { m_pParentMtx = pMtx; }						// 親のマトリックスの設定
	void SetOffset(const D3DXVECTOR3 offset) { m_offset = offset; }						// 高さの設定
	void SetBlendMode(const BLEND_MODE EBlendMode) { m_EBlendMode = EBlendMode; }		// αブレンドの方法の設定
	void SetDivision(const int nDivision);												// 分割数の設定

private:
	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	D3DXMATRIX *m_pParentMtx;			// 親のマトリックス
	D3DXVECTOR3 m_offset;				// 位置の差分
	BLEND_MODE m_EBlendMode;			// αブレンドの方法
	int m_nDivision;					// 分割数
};

#endif
