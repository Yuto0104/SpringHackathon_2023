//=============================================================================
//
// エネミークラス(enemy.h)
// Author : 髙野馨將
// 概要 : エネミー生成を行う
//
//=============================================================================
#ifndef _ENEMY_H_		// このマクロ定義がされてなかったら
#define _ENEMY_H_		// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "object3D.h"

//*****************************************************************************
//	前方宣言
//*****************************************************************************
class CCollision_Rectangle3D;

//=============================================================================
// エネミークラス
// Author : 髙野馨將
// 概要 : エネミー生成を行うクラス
//=============================================================================
class CEnemy : public CObject3D
{
public:

	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static CEnemy *Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, int nLife);			// エネミーの生成

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CEnemy();
	~CEnemy();

	//--------------------------------------------------------------------
	// オーバーライド関数
	//--------------------------------------------------------------------
	HRESULT Init() override;														// 初期化
	void Uninit() override;															// 終了
	void Update() override;															// 更新
	void Draw() override;															// 描画

	void SetLife(int nLife) { m_nLife = nLife; }									// 体力の設定
	int GetLife() { return m_nLife; }												// 体力の取得
private:
	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	CCollision_Rectangle3D *m_pCollisionRectangle3D;        // 3D矩形の当たり判定
	D3DXVECTOR3				m_move;							// 移動量
	int						m_nLife;						// 体力
	bool					m_bTex;
};

#endif