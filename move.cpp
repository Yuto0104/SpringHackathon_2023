//=============================================================================
//
// 移動処理(move.h)
// Author : 唐﨑結斗
// 概要 : 移動に関する計算を行う
//
//=============================================================================

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "move.h"

//=============================================================================
// コンストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス生成時に行う処理
//=============================================================================
CMove::CMove()
{
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);			// 移動量
	m_fSpeed = 0.0f;								// 移動速度
	m_fMaxSpeed = 0.0f;								// 最高速度
	m_fMinSpeed = 0.0f;								// 最低速度
	m_fFriction = 0.0f;								// 摩擦係数
}

//=============================================================================
// デストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス終了時に行う処理
//=============================================================================
CMove::~CMove()
{

}

//=============================================================================
// 移動情報の初期設定
// Author : 唐﨑結斗
// 概要 : 引数の数値を設定し返す
//=============================================================================
void CMove::SetMoving(float fSpeed, float fMaxSpeed, float fMinSpeed, float fFriction)
{
	// 移動速度
	m_fSpeed = fSpeed;

	// 最高速度
	m_fMaxSpeed = fMaxSpeed;

	// 最低速度
	m_fMinSpeed = fMinSpeed;

	// 摩擦係数
	m_fFriction = fFriction;
}

//=============================================================================
// 慣性を伴う移動
// Author : 唐﨑結斗
// 概要 : 慣性を算出し、移動量に加算する
//=============================================================================
void CMove::Moving(const D3DXVECTOR3 &moveDir)
{
	// 正規化
	D3DXVECTOR3 vec = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	D3DXVec3Normalize(&vec, &moveDir);

	if (vec.x != 0.0f || vec.y != 0.0f || vec.z != 0.0f)
	{// 移動している
	 // 速度の算出
		m_move += vec * m_fSpeed;

		// 速度リミッター
		float speed = D3DXVec3Length(&m_move);

		if (speed > m_fMaxSpeed)
		{// 速度を最高速度
			m_move = m_move / speed * m_fMaxSpeed;
		}
	}

	// 摩擦係数を加える
	m_move *= (1.0f - m_fFriction);

	// 速度リミッター
	if (D3DXVec3Length(&m_move) < m_fMinSpeed)
	{// 速度を0に設定
		m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	}
}

//=============================================================================
// 移動方向の設定
// Author : 唐﨑結斗
// 概要 : 移動方向の設定
//=============================================================================
void CMove::SetMoveVec(const D3DXVECTOR3 vec)
{
	// 正規化
	D3DXVECTOR3 myVec = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	D3DXVec3Normalize(&myVec, &vec);

	// 移動距離の設定
	float fLength = sqrtf((m_move.x * m_move.x) + (m_move.y * m_move.y) + (m_move.z * m_move.z));

	// 移動ベクトルの設定
	m_move = myVec * fLength;
}


