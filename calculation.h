//**************************************************************************************************
//
// 計算処理(calculation.h)
// Auther：唐﨑結斗
// 概要 : 計算を行う
//
//**************************************************************************************************
#ifndef _CALCULATION_H_			// このマクロ定義がされてなかったら
#define _CALCULATION_H_			// 二重インクルード防止のマクロ定義

//*****************************************************************************
// ライブラリーリンク
//*****************************************************************************
#pragma comment(lib,"d3d9.lib")			// 描画処理に必要
#pragma comment(lib,"d3dx9.lib")		// [d3d9.lib]の拡張ライブラリ

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <Windows.h>
#include "d3dx9.h"							// 描画処理に必要

//=============================================================================
// パーツクラス
// Author : 唐﨑結斗
// 概要 : パーツ生成を行うクラス
//=============================================================================
class CCalculation
{
public:
	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static D3DXVECTOR3 WorldCastVtx(D3DXVECTOR3 vtx, D3DXVECTOR3 FormerPos, D3DXVECTOR3 FormerRot);			// ワールド座標にキャスト
	static float RotNormalization(float fRot);																// 角度の正規化 
	static float Gravity();																					// 重力
	static int Rand(const int nMax);																		// 乱数の生成
	static int Rand(const int nMax,const int nMin);															// 乱数の生成
	static void SetGravity(const float fGravity) { m_fGravity = fGravity; }									// 重力の値を設定

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CCalculation();
	~CCalculation();

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	void Init();			// 初期化
	void Uninit();			// 終了

private:
	//--------------------------------------------------------------------
	// 静的メンバ変数
	//--------------------------------------------------------------------
	static float m_fGravity;			// 重力
};

#endif
