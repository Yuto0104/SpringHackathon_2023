//**************************************************************************************************
//
// ライト処理(light.h)
// Auther：唐﨑結斗
//
//**************************************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <assert.h>
#include "light.h"

#include "application.h"
#include "renderer.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
CLight *CLight::m_apLight[MAX_LIGHT] = {};		// 敵インスタンス

//=============================================================================
// インスタンス生成
// Author : 唐﨑結斗
// 概要 : インスタンスを生成する
//=============================================================================
CLight * CLight::Create(D3DXVECTOR3 vec, D3DXCOLOR col)
{
	// オブジェクトインスタンス
	CLight *pLight = nullptr;

	pLight = new CLight;

	if (pLight != nullptr)
	{// 数値の初期化
		pLight->SetVec(vec);
		pLight->SetCol(col);
		pLight->Init();
	}
	else
	{// メモリの確保ができなかった
		assert(false);
	}

	// インスタンスを返す
	return pLight;
}

//=============================================================================
// インスタンスの解放
// Author : 唐﨑結斗
// 概要 : すべてのインスタンスを解放する処理
//=============================================================================
void CLight::ReleaseAll(void)
{
	for (int nCntLigh = 0; nCntLigh < MAX_LIGHT; nCntLigh++)
	{
		if (m_apLight[nCntLigh] != nullptr)
		{// インスタンスが使用されてる
			// 終了処理
			m_apLight[nCntLigh]->Uninit();
		}
	}
}

//=============================================================================
// コンストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス生成時に行う処理
//=============================================================================
CLight::CLight()
{
	for (int nCntLigh = 0; nCntLigh < MAX_LIGHT; nCntLigh++)
	{
		if (m_apLight[nCntLigh] == nullptr)
		{// インスタンスが使用されてない
			m_apLight[nCntLigh] = this;
			m_nNumID = nCntLigh;
			break;
		}
	}
}

//=============================================================================
// デストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス終了時に行う処理
//=============================================================================
CLight::~CLight()
{

}

//=============================================================================
// 初期化
// Author : 唐﨑結斗
// 概要 : ライトの設定を行い、有効にする
//=============================================================================
void CLight::Init(void)
{// レンダラーのゲット
	CRenderer *pRenderer = CApplication::GetRenderer();

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// ライトをクリアする
	memset(&m_light, 0, sizeof(m_light));

	// ライトの種類
	m_light.Type = D3DLIGHT_DIRECTIONAL;			// 平行光源

	// ライトの拡散光を設定
	m_light.Diffuse = m_color;						// ライトカラー

	// 正規化する(大きさを1のベクトルにする)
	D3DXVec3Normalize(&m_vecDir, &m_vecDir);		// ベクトルを大きさ1にする便利関数
	m_light.Direction = m_vecDir;

	// ライトを設定する
	pDevice->SetLight(m_nNumID, &m_light);

	// ライトを有効にする
	pDevice->LightEnable(m_nNumID, TRUE);
}

//=============================================================================
// 終了
// Author : 唐﨑結斗
// 概要 : 
//=============================================================================
void CLight::Uninit(void)
{
	Release();
}

//=============================================================================
// 更新
// Author : 唐﨑結斗
// 概要 : 
//=============================================================================
void CLight::Update(void)
{
	
}

//=============================================================================
// インスタンスの解放
// Author : 唐﨑結斗
// 概要 : インスタンスを解放する処理
//=============================================================================
void CLight::Release(void)
{
	if (m_apLight[m_nNumID] != nullptr)
	{// インスタンスが使用されてる
		// メモリの解放
		const int nID = m_nNumID;
		delete m_apLight[nID];
		m_apLight[nID] = nullptr;
	}
}
