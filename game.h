//=============================================================================
//
// ゲームクラス(game.h)
// Author : 唐﨑結斗
// 概要 : ゲームクラスの管理を行う
//
//=============================================================================
#ifndef _GAME_H_		// このマクロ定義がされてなかったら
#define _GAME_H_		// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "scene_mode.h"

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class CScore;
class CTime;
class CEnemy;
class CPlayer;
class CLille;

//=============================================================================
// ゲームクラス
// Author : 唐﨑結斗
// 概要 : ゲーム生成を行うクラス
//=============================================================================
class CGame : public CSceneMode
{
public:
	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static CScore *GetScore() { return m_pScore; }					// スコア
	static CTime *GetTime() { return m_pTime; }						// タイム
	static CEnemy *GetEnemy() { return m_pEnemy; }					// エネミー
	static CPlayer *GetPlayer() { return m_pPlayer; }				// プレイヤー
	static void SetGame(const bool bGame) { m_bGame = bGame; }		// ゲームの状況の設定
	static void SetEnemy(CEnemy *enemy) { m_pEnemy = enemy; }

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CGame();
	~CGame() override;

	//--------------------------------------------------------------------
	// 静的メンバ変数
	//--------------------------------------------------------------------
	static CScore *m_pScore;						// スコア
	static CTime *m_pTime;							// タイム
	static CEnemy *m_pEnemy;						// エネミー
	static CPlayer *m_pPlayer;						// プレイヤー
	static CLille *m_pLille;						// リール
	static D3DXCOLOR fogColor;						// フォグカラー
	static float fFogStartPos;						// フォグの開始点
	static float fFogEndPos;						// フォグの終了点
	static float fFogDensity;						// フォグの密度
	static bool m_bGame;							// ゲームの状況

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init() override;					// 初期化
	void Uninit() override;						// 終了
	void Update() override;						// 更新
	void Draw() override;						// 描画

	void EnemySpawn();							// 敵を湧かせる
	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	int m_nSpawnTime;							// スポーン時間
};

#endif



